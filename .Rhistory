<<<<<<< HEAD
install.packages("mapdeck")
mapdeck( token = key, style = 'mapbox://styles/mapbox/dark-v9', pitch = 45 ) %>%
add_arc(
data = artist_travel
, layer_id = "arc_layer"
, origin = c("start_lon", "start_lat")
, destination = c("end_lon", "end_lat")
, stroke_from = "from"
, stroke_to = "to"
, stroke_width = "stroke"
, auto_highlight = TRUE
, tooltip = 'artist'
)
?%>%
=======
# Create dataset
data <- data.frame(
id=seq(1,60),
individual=paste( "Mister ", seq(1,60), sep=""),
value=sample( seq(10,100), 60, replace=T)
)
server <- function(input, output) {
dat <- reactive(data)
output$distPlot <- renderPlot({
ggplot(data, aes(x=as.factor(id), y=value)) +# This add the bars with a blue color
geom_bar(stat="identity", fill=alpha("blue", 0.3)) +
# Limits of the plot = very important. The negative value controls the size of the inner circle, the positive one is useful to add size over each bar
ylim(-100,120) +
# Custom the theme: no axis title and no cartesian grid
theme_minimal() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-2,4), "cm")     # This remove unnecessary margin around plot
# +
# This makes the coordinate polar instead of cartesian.
#coord_polar(start = 0)
# p <- ggplotly(p)
# p
})
}
ui <- basicPage(
h3("Example of plot.ly, the plot is interactive"),
#sliderInput("myslider", "A slider:", min=1, max=50, value=10),
plotOutput("distPlot")
)
shinyApp(ui = ui, server = server)
#load in dataset
# Libraries
library(tidyverse)
# Create dataset
data <- data.frame(
id=seq(1,60),
individual=paste( "Mister ", seq(1,60), sep=""),
value=sample( seq(10,100), 60, replace=T)
)
server <- function(input, output) {
dat <- reactive(data)
output$distPlot <- renderPlot({
ggplot(data, aes(x=as.factor(id), y=value)) +# This add the bars with a blue color
geom_bar(stat="identity", fill=alpha("blue", 0.3)) +
# Limits of the plot = very important. The negative value controls the size of the inner circle, the positive one is useful to add size over each bar
ylim(-100,120) +
# Custom the theme: no axis title and no cartesian grid
theme_minimal() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-2,4), "cm")     # This remove unnecessary margin around plot
+
# This makes the coordinate polar instead of cartesian.
coord_polar(start = 0)
# p <- ggplotly(p)
# p
})
}
ui <- basicPage(
h3("Example of plot.ly, the plot is interactive"),
#sliderInput("myslider", "A slider:", min=1, max=50, value=10),
plotOutput("distPlot")
)
shinyApp(ui = ui, server = server)
library(ggplot)
#load in dataset
# Libraries
library(tidyverse)
# Create dataset
data <- data.frame(
id=seq(1,60),
individual=paste( "Mister ", seq(1,60), sep=""),
value=sample( seq(10,100), 60, replace=T)
)
server <- function(input, output) {
dat <- reactive(data)
output$distPlot <- renderPlot({
ggplot(data, aes(x=as.factor(id), y=value)) +# This add the bars with a blue color
geom_bar(stat="identity", fill=alpha("blue", 0.3)) +
# Limits of the plot = very important. The negative value controls the size of the inner circle, the positive one is useful to add size over each bar
ylim(-100,120) +
# Custom the theme: no axis title and no cartesian grid
theme_minimal() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-2,4), "cm")     # This remove unnecessary margin around plot
+
# This makes the coordinate polar instead of cartesian.
coord_polar(start = 0)
# p <- ggplotly(p)
# p
})
}
ui <- basicPage(
h3("Example of plot.ly, the plot is interactive"),
#sliderInput("myslider", "A slider:", min=1, max=50, value=10),
plotOutput("distPlot")
)
shinyApp(ui = ui, server = server)
runApp('Living Lab scripts text/Circular bar chart test/R/Shiny_for_interactive_barchart.R')
#load in dataset
# Libraries
library(tidyverse)
# Create dataset
data <- data.frame(
id=seq(1,60),
individual=paste( "Mister ", seq(1,60), sep=""),
value=sample( seq(10,100), 60, replace=T)
)
server <- function(input, output) {
dat <- reactive(data)
output$distPlot <- renderPlot({
ggplot(data, aes(x=as.factor(id), y=value)) +# This add the bars with a blue color
geom_bar(stat="identity", fill=alpha("blue", 0.3)) +
# Limits of the plot = very important. The negative value controls the size of the inner circle, the positive one is useful to add size over each bar
ylim(-100,120) +
# Custom the theme: no axis title and no cartesian grid
theme_minimal() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-2,4), "cm")     # This remove unnecessary margin around plot
+
# This makes the coordinate polar instead of cartesian.
coord_polar(start = 0)
# p <- ggplotly(p)
# p
})
}
ui <- basicPage(
h3("Example of plot.ly, the plot is interactive"),
#sliderInput("myslider", "A slider:", min=1, max=50, value=10),
plotOutput("distPlot")
)
shinyApp(ui = ui, server = server)
distPlot
library(plotly)
#load in dataset
# Libraries
library(tidyverse)
# Create dataset
data <- data.frame(
id=seq(1,60),
individual=paste( "Mister ", seq(1,60), sep=""),
value=sample( seq(10,100), 60, replace=T)
)
server <- function(input, output) {
dat <- reactive(data)
output$distPlot <- renderPlot({
ggplot(data, aes(x=as.factor(id), y=value)) +# This add the bars with a blue color
geom_bar(stat="identity", fill=alpha("blue", 0.3)) +
# Limits of the plot = very important. The negative value controls the size of the inner circle, the positive one is useful to add size over each bar
ylim(-100,120) +
# Custom the theme: no axis title and no cartesian grid
theme_minimal() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-2,4), "cm")     # This remove unnecessary margin around plot
+
# This makes the coordinate polar instead of cartesian.
coord_polar(start = 0)
# p <- ggplotly(p)
# p
})
}
ui <- basicPage(
h3("Example of plot.ly, the plot is interactive"),
#sliderInput("myslider", "A slider:", min=1, max=50, value=10),
plotOutput("distPlot")
)
shinyApp(ui = ui, server = server)
View(server)
# A demonstration of clicking, hovering, and brushing
shinyApp(
ui = basicPage(
fluidRow(
column(width = 4,
plotOutput("plot", height=300,
click = "plot_click",  # Equiv, to click=clickOpts(id="plot_click")
hover = hoverOpts(id = "plot_hover", delayType = "throttle"),
brush = brushOpts(id = "plot_brush")
),
h4("Clicked points"),
tableOutput("plot_clickedpoints"),
h4("Brushed points"),
tableOutput("plot_brushedpoints")
),
column(width = 4,
verbatimTextOutput("plot_clickinfo"),
verbatimTextOutput("plot_hoverinfo")
),
column(width = 4,
wellPanel(actionButton("newplot", "New plot")),
verbatimTextOutput("plot_brushinfo")
)
)
),
server = function(input, output, session) {
data <- reactive({
input$newplot
# Add a little noise to the cars data so the points move
cars + rnorm(nrow(cars))
})
output$plot <- renderPlot({
d <- data()
plot(d$speed, d$dist)
})
output$plot_clickedpoints <- renderTable({
# For base graphics, we need to specify columns, though for ggplot2,
# it's usually not necessary.
res <- nearPoints(data(), input$plot_click, "speed", "dist")
if (nrow(res) == 0)
return()
res
})
output$plot_brushedpoints <- renderTable({
res <- brushedPoints(data(), input$plot_brush, "speed", "dist")
if (nrow(res) == 0)
return()
res
})
}
)
#load in dataset
# Libraries
library(tidyverse)
# Create dataset
data <- data.frame(
id=seq(1,60),
individual=paste( "Mister ", seq(1,60), sep=""),
value=sample( seq(10,100), 60, replace=T)
)
server <- function(input, output) {
dat <- reactive(data)
output$distPlot <- renderPlot({
ggplot(data, aes(x=as.factor(id), y=value)) +# This add the bars with a blue color
geom_bar(stat="identity", fill=alpha("green", 0.3)) +
# Limits of the plot = very important. The negative value controls the size of the inner circle, the positive one is useful to add size over each bar
ylim(-100,120) +
# Custom the theme: no axis title and no cartesian grid
theme_minimal() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-2,4), "cm")     # This remove unnecessary margin around plot
+
# This makes the coordinate polar instead of cartesian.
coord_polar(start = 0)
# p <- ggplotly(p)
# p
})
}
ui <- basicPage(
h3("Example of plot.ly, the plot is interactive"),
#sliderInput("myslider", "A slider:", min=1, max=50, value=10),
plotOutput("distPlot")
)
shinyApp(ui = ui, server = server)
?renderPlotly
?renderploit
?renderplot
?renderPlot
# Libraries
library(tidyverse)
# Create dataset
data <- data.frame(
individual=paste( "Mister ", seq(1,60), sep=""),
group=c( rep('A', 10), rep('B', 30), rep('C', 14), rep('D', 6)) ,
value=sample( seq(10,100), 60, replace=T)
)
# Set a number of 'empty bar' to add at the end of each group
empty_bar <- 4
to_add <- data.frame( matrix(NA, empty_bar*nlevels(data$group), ncol(data)) )
colnames(to_add) <- colnames(data)
to_add$group <- rep(levels(data$group), each=empty_bar)
data <- rbind(data, to_add)
data <- data %>% arrange(group)
data$id <- seq(1, nrow(data))
# ----- This section prepare a dataframe for labels ---- #
# Get the name and the y position of each label
label_data <- data
# calculate the ANGLE of the labels
number_of_bar <- nrow(label_data)
angle <-  90 - 360 * (label_data$id-0.5) /number_of_bar     # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0)
# calculate the alignment of labels: right or left
# If I am on the left part of the plot, my labels have currently an angle < -90
label_data$hjust<-ifelse( angle < -90, 1, 0)
# flip angle BY to make them readable
label_data$angle<-ifelse(angle < -90, angle+180, angle)
# ----- ------------------------------------------- ---- #
# Make the plot
p <- ggplot(data, aes(x=as.factor(id), y=value, fill=group)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
# This add the bars with a blue color
geom_bar(stat="identity", alpha=0.5) +
# Limits of the plot = very important. The negative value controls the size of the inner circle, the positive one is useful to add size over each bar
ylim(-100,120) +
# Custom the theme: no axis title and no cartesian grid
theme_minimal() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm")     # This remove unnecessary margin around plot
) +
# This makes the coordinate polar instead of cartesian.
coord_polar(start = 0) +
# Add the labels, using the label_data dataframe that we have created before
geom_text(data=label_data,
aes(x=id, y=value+10, label=individual, hjust=hjust),
color="black", fontface="bold",alpha=0.6, size=2.5,
angle= label_data$angle, inherit.aes = FALSE )
p
#load in dataset
# Libraries
library(tidyverse)
# Create dataset
data <- data.frame(
id=seq(1,60),
individual=paste( "Mister ", seq(1,60), sep=""),
value=sample( seq(10,100), 60, replace=T)
)
server <- function(input, output) {
dat <- reactive(data)
output$distPlot <- renderPlot({
ggplot(data, aes(x=as.factor(id), y=value)) +# This add the bars with a blue color
geom_bar(stat="identity", fill=alpha("green", 0.3)) +
# Limits of the plot = very important. The negative value controls the size of the inner circle, the positive one is useful to add size over each bar
ylim(-100,120) +
# Custom the theme: no axis title and no cartesian grid
theme_minimal() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-2,4), "cm")     # This remove unnecessary margin around plot
+
# This makes the coordinate polar instead of cartesian.
coord_polar(start = 0)
# p <- ggplotly(p)
# p
})
}
ui <- basicPage(
h3("Example of plot.ly, the plot is interactive"),
#sliderInput("myslider", "A slider:", min=1, max=50, value=10),
plotOutput("distPlot")
)
shinyApp(ui = ui, server = server)
setwd("C:/Users/flori/Desktop/livinglab")
>>>>>>> bf85d5236e897522ba9f6a916f95a4495bb193b7
library(sf)
library(mapdeck)
<<<<<<< HEAD
key <- "pk.eyJ1IjoibWllZGVtYXRlcyIsImEiOiJjazV4dmVkbXcyMzQ3M2ttbG5kbzU3bWt4In0.G3RNl0RBO_tWTY1wYrv7tQ"
set_token(key)
artist_travel <- read.csv('input/artist_travel.csv',header = TRUE,sep=";")
mapdeck( token = key, style = 'mapbox://styles/mapbox/dark-v9', pitch = 45 ) %>%
add_arc(
data = artist_travel
, layer_id = "arc_layer"
, origin = c("start_lon", "start_lat")
, destination = c("end_lon", "end_lat")
, stroke_from = "from"
, stroke_to = "to"
, stroke_width = "stroke"
, auto_highlight = TRUE
, tooltip = 'artist'
)
setwd("C:/Users/alexandra.akosa/Desktop/livinglab")
library(sf)
library(mapdeck)
key <- "pk.eyJ1IjoibWllZGVtYXRlcyIsImEiOiJjazV4dmVkbXcyMzQ3M2ttbG5kbzU3bWt4In0.G3RNl0RBO_tWTY1wYrv7tQ"
set_token(key)
artist_travel <- read.csv('input/artist_travel.csv',header = TRUE,sep=";")
mapdeck( token = key, style = 'mapbox://styles/mapbox/dark-v9', pitch = 45 ) %>%
add_arc(
data = artist_travel
, layer_id = "arc_layer"
, origin = c("start_lon", "start_lat")
, destination = c("end_lon", "end_lat")
, stroke_from = "from"
, stroke_to = "to"
, stroke_width = "stroke"
, auto_highlight = TRUE
, tooltip = 'artist'
)
=======
library(plotly)
dgtl <- st_read("input/dgtlAll.shp")
flows2 <- read.csv("input/energyflows.csv", sep = ";")
library(sf)
install.packages("sf")
install.packages("sp")
install.packages("mapdeck")
install.packages("mapdeck")
install.packages("plotly")
>>>>>>> bf85d5236e897522ba9f6a916f95a4495bb193b7
library(sf)
library(mapdeck)
<<<<<<< HEAD
key <- "pk.eyJ1IjoibWllZGVtYXRlcyIsImEiOiJjazV4dmVkbXcyMzQ3M2ttbG5kbzU3bWt4In0.G3RNl0RBO_tWTY1wYrv7tQ"
set_token(key)
artist_travel <- read.csv('input/artist_travel.csv',header = TRUE,sep=";")
mapdeck( token = key, style = 'mapbox://styles/mapbox/dark-v9', pitch = 45 ) %>%
=======
library(plotly)
dgtl <- st_read("input/dgtlAll.shp")
flows2 <- read.csv("input/energyflows.csv", sep = ";")
flows2$id <- seq_len(nrow(flows2))
flows2$stroke <- sample(1:3, size = nrow(flows2), replace = T)
dgtl$height <- 10
dgtl[1,"height"] <- 10.0
dgtl[2,"height"] <- 10
dgtl[3,"height"] <- 10
dgtl[4,"height"] <- 10
dgtl$color <- "#4F364D"
dgtl[1,"color"]<-"#E9EFBF"
dgtl[2,"color"]<- "#E9EFBF"
dgtl[3,"color"]<- "#E9EFBF"
dgtl[4,"color"]<- "#E9EFBF"
dgtl[5,"color"]<- "#E9EFBF"
dgtl[6,"color"]<- "#E9EFBF"
dgtl[7,"color"]<- "#E9EFBF"
dgtl[8,"color"]<- "#E9EFBF"
dgtl[9,"color"]<- "#FBBE4F"
dgtl[10,"color"]<- "#FBBE4F"
dgtl[11,"color"]<- "#FBBE4F"
dgtl[12,"color"]<- "#FBBE4F"
dgtl[13,"color"]<- "#FBBE4F"
dgtl[14,"color"]<- "#FBBE4F"
dgtl[15,"color"]<- "#FBBE4F"
dgtl[16,"color"]<- "#FBBE4F"
dgtl[17,"color"]<- "#FBBE4F"
dgtl[18,"color"]<- "#FBBE4F"
dgtl[19,"color"]<- "#FBBE4F"
dgtl[20,"color"]<- "#FBBE4F"
dgtl[21,"color"]<- "#FBBE4F"
dgtl[22,"color"]<- "#737574"
dgtl[23,"color"]<- "#186134"
dgtl[24,"color"]<- "#186134"
dgtl[25,"color"]<- "#186134"
dgtl[26,"color"]<- "#186134"
dgtl[27,"color"]<- "#186134"
flows2$color_from <- "color"
flows2[1,"color_from"] <- "#14f593"
flows2[2,"color_from"] <- "#14f593"
flows2[3,"color_from"] <- "#14f593"
flows2[4,"color_from"] <- "#fa0505"
flows2[5,"color_from"] <- "#14f593"
flows2[6,"color_from"] <- "#14f593"
flows2[7,"color_from"] <- "#14f593"
flows2[8,"color_from"] <- "#14f593"
flows2[9,"color_from"] <- "#14f593"
flows2[10,"color_from"] <- "#fa0505"
flows2[11,"color_from"] <- "#fa0505"
flows2[12,"color_from"] <- "#14f593"
flows2[13,"color_from"] <- "#14f593"
flows2[14,"color_from"] <- "#14f593"
flows2[15,"color_from"] <- "#fa0505"
flows2[16,"color_from"] <- "#14f593"
flows2[17,"color_from"] <- "#14f593"
flows2[18,"color_from"] <- "#14f593"
flows2[19,"color_from"] <- "#14f593"
flows2$color_to <- "color"
flows2[1,"color_to"] <- "#14f593"
flows2[2,"color_to"] <- "#14f593"
flows2[3,"color_to"] <- "#14f593"
flows2[4,"color_to"] <- "#fa0505"
flows2[5,"color_to"] <- "#14f593"
flows2[6,"color_to"] <- "#14f593"
flows2[7,"color_to"] <- "#14f593"
flows2[8,"color_to"] <- "#14f593"
flows2[9,"color_to"] <- "#14f593"
flows2[10,"color_to"] <- "#fa0505"
flows2[11,"color_to"] <- "#fa0505"
flows2[12,"color_to"] <- "#14f593"
flows2[13,"color_to"] <- "#14f593"
flows2[14,"color_to"] <- "#14f593"
flows2[15,"color_to"] <- "#fa0505"
flows2[16,"color_to"] <- "#14f593"
flows2[17,"color_to"] <- "#14f593"
flows2[18,"color_to"] <- "#14f593"
flows2[19,"color_to"] <- "#14f593"
dgtl$fill_opacity <- 225
dgtl$fill_colour <- "#2980B"
dgtl[1,"fill_colour"] <- "?a"
dgtl[2,"fill_colour"] <- "#8E44AD"
dgtl[3,"fill_colour"] <- "#4A235A"
dgtl[4, "fill_colour"] <- "#A569BD"
dgtl[5, "fill_colour"] <- "#E74C3C"
dgtl[6, "fill_colour"] <- "#3498DB"
dgtl[7, "fill_colour"] <- "#3498DB"
dgtl$hover <- "Generatior <br> kWh 326 <br> CO2 0"
dgtl[1,"hover"]<-"Modular <br> kWh 4742 <br> CO2 0"
dgtl[2,"hover"]<- "Generator <br> kWh 326 <br> CO2 0"
dgtl[3,"hover"]<- "Skyline <br> kWh 844 <br> CO2 0 "
dgtl[4,"hover"]<- "Kornuit <br> kWh <br> CO2 0 "
dgtl[5,"hover"]<- "Art <br> kWh 970 <br> CO2 0  "
dgtl[6,"hover"]<- "AMP <br> kWh 2298 <br> CO2 0 "
dgtl[7,"hover"]<- "Live <br> kWh 960 <br> CO2 0"
dgtl[8,"hover"]<- "foodcourt <br> kWh 2964 <br> CO2 1648 kg "
dgtl[9,"hover"]<-"L1"
dgtl[10,"hover"]<- "L2"
dgtl[11,"hover"]<- "L3"
dgtl[12,"hover"]<- "L4"
dgtl[13,"hover"]<- "L5"
dgtl[14,"hover"]<- "L6"
dgtl[15,"hover"]<- "L7"
dgtl[16,"hover"]<- "L8"
dgtl[17,"hover"]<- "L9"
dgtl[18,"hover"]<- "L10 <br> CO2 422.5 kg"
dgtl[19,"hover"]<- "L11"
dgtl[20,"hover"]<-"L12"
dgtl[21,"hover"]<- "L13"
dgtl[22,"hover"]<- "E1 <br> kWh: 6020 <br> CO2: 2117kg <br> NOx: 9,16kg"
dgtl[23,"hover"]<- "E2 <br> kwh: 2139 <br> CO2: 0kg <br> Nox: 0kg"
dgtl[24,"hover"]<- "E3 <br> kwh: 2139 <br> CO2: 0kg <br> Nox: 0kg"
dgtl[25,"hover"]<- "E4 <br> kwh: 2139 <br> CO2: 0kg <br> Nox: 0kg"
dgtl[26,"hover"]<- "E5 <br> kwh: 2139 <br> CO2: 0kg <br> Nox: 0kg"
dgtl[27,"hover"]<- "E8 <br> kwh: 2139 <br> CO2: 0kg <br> Nox: 0kg"
# Key for mapdeck, owned by Tes
key <- "pk.eyJ1IjoibWllZGVtYXRlcyIsImEiOiJjazV4dmVkbXcyMzQ3M2ttbG5kbzU3bWt4In0.G3RNl0RBO_tWTY1wYrv7tQ"
# Initialize mapdeck
# https://symbolixau.github.io/mapdeck/articles/mapdeck.html#the-basics
mapdeck(token = key, style = mapdeck_style("dark"), pitch = 50, zoom = 100) %>%
add_polygon(
data = dgtl
, layer = "polygon_layer"
, fill_opacity = 225
, fill_colour = "color"
, elevation = "height"
, auto_highlight = TRUE
, tooltip = 'hover'
)%>%
>>>>>>> bf85d5236e897522ba9f6a916f95a4495bb193b7
add_arc(
data = artist_travel
, layer_id = "arc_layer"
, origin = c("start_lon", "start_lat")
, destination = c("end_lon", "end_lat")
, stroke_from = "from"
, stroke_to = "to"
, stroke_width = "stroke"
, auto_highlight = TRUE
, tooltip = 'mode'
)
